---
import Layout from '../layouts/Layout.astro';
import { PROMPT, CARET_SYMBOL, ASCII_ART } from '../lib/constants';
---

<Layout title="Welcome to Astro.">
  <main class="min-h-screen flex flex-col p-5">
    <div>
      <pre class="leading-tight mb-5">{ASCII_ART}</pre>

      <p>Welcome to my interactive web terminal.</p>

      <p>For a list of available commands, type 'help'.</p>

      <br />

      <p>
        You can use autocomplete by pressing 'Tab' when a suggestion appears.
      </p>
    </div>
    <br />

    <div id="history" class="prose max-w-2xl flex flex-col"></div>

    <div class="flex gap-x-2.5 pr-5 flex-1">
      <span>{PROMPT}</span>

      <div class="flex-1 flex">
        <textarea
          name="input"
          id="input-area"
          class="outline-none caret-transparent flex-1 bg-light-body text-light-text dark:bg-dark-body dark:text-dark-text"
          autofocus
          autocomplete="off"></textarea>

        <p id="prediction" class="absolute opacity-25"></p>

        <span
          id="caret"
          class="absolute animate-pulse font-bold text-light-caret dark:text-dark-caret opacity-70"
          >{CARET_SYMBOL}</span
        >
      </div>
    </div>
  </main>
</Layout>

<script>
  import {
    COMMANDS,
    PROMPT,
    WHOIS_MESSAGE,
    HELP_MESSAGE,
    WHOAMI_MESSAGE,
    PROJECTS_MESSAGE,
    COMMAND_NOT_FOUND_MESSAGE,
    SOCIAL_MESSAGE,
    GITHUB_MESSAGE,
    type Command,
  } from '../lib/constants';
  import { clearTextArea } from '../lib/utils';

  const input = document.getElementById('input-area') as HTMLTextAreaElement;
  const history = document.getElementById('history') as HTMLDivElement;
  const predictionBox = document.getElementById(
    'prediction',
  ) as HTMLParagraphElement;
  const caret = document.getElementById('caret') as HTMLSpanElement;

  function predictCommand(value: string): Command {
    return COMMANDS.find((command) => command.startsWith(value)) ?? '';
  }

  function executeCommand(command: Command) {
    switch (command) {
      case 'whois':
        return WHOIS_MESSAGE;
      case 'whoami':
        return WHOAMI_MESSAGE;
      case 'projects':
        return PROJECTS_MESSAGE;
      case 'social':
        return SOCIAL_MESSAGE;
      case 'help':
        return HELP_MESSAGE;
      case 'github':
        return GITHUB_MESSAGE;
      case '':
        return '';
      default:
        return COMMAND_NOT_FOUND_MESSAGE + ' ' + command;
    }
  }

  function printOutput(command: Command) {
    const result = executeCommand(command);

    const newOutput = document.createElement('div');
    const prompt = document.createElement('span');
    prompt.innerText = `${PROMPT} ${command}`;

    newOutput.appendChild(prompt);

    const resultParagraph = document.createElement('p');
    resultParagraph.innerHTML += '<pre>' + result + '</pre>';

    prompt.style.flex = '1 1 0%';
    prompt.style.marginBottom = '0.75rem';

    newOutput.style.display = 'flex';
    newOutput.style.flexDirection = 'column';
    newOutput.style.flex = '1 1 0%';
    newOutput.style.marginBottom = '0.75rem';
    newOutput.appendChild(resultParagraph);

    history.appendChild(newOutput);
  }

  function moveCaret(caret: HTMLSpanElement, input: string) {
    caret.style.marginLeft = `${0.6 * (input.length % 40)}rem`;
  }

  input.onbeforeinput = (e) => {
    // Prevent from inserting more than 39 characters into the command prompt
    if (input.value.length + (e.data?.length ?? 0) >= 39) e.preventDefault();
  };

  input.onkeydown = (e) => {
    switch (e.key) {
      case 'Enter':
        e.preventDefault();

        if (input.value.toLocaleLowerCase().trim() === 'clear')
          history.innerHTML = '';
        else printOutput(input.value.trim().toLowerCase());

        clearTextArea(input);
        predictionBox.innerText = '';
        moveCaret(caret, '');

        window.scrollTo(0, document.body.scrollHeight);
        break;

      case 'Tab':
        e.preventDefault();

        if (predictionBox.innerText.length !== 0)
          input.value = predictionBox.innerText;

        moveCaret(caret, input.value);
        break;
    }
  };

  input.oninput = (e) => {
    const isTextAreaEmpty = input.value.length <= 1;

    if (isTextAreaEmpty) predictionBox.innerText = '';
    else
      predictionBox.innerText = predictCommand(
        input.value.trim().toLowerCase(),
      );

    moveCaret(caret, input.value);
  };
</script>
